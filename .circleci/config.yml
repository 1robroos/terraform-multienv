# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
workflows:
  pipeline:
    when:
      condition:
        or:
          - equal: [development, << pipeline.git.branch >>]
          - equal: [staging, << pipeline.git.branch >>]
          - equal: [production, << pipeline.git.branch >>]
    jobs:
      - prepare-files-folders
      - terraform-apply:
          requires:
            - prepare-files-folders

jobs:
  prepare-files-folders:
    docker:
      - image: ubuntu:18.04
    steps:
      - checkout
      - run:
          name: prepare-files-folders
          command: |
            mkdir -p ${CIRCLE_BRANCH}/
            cp live/*.${CIRCLE_BRANCH} ${CIRCLE_BRANCH}/
            cp live/*.tf ${CIRCLE_BRANCH}/
            cp live/*.tpl ${CIRCLE_BRANCH}/ 2>/dev/null || true
            mv ${CIRCLE_BRANCH}/backend.tf.${CIRCLE_BRANCH} ${CIRCLE_BRANCH}/backend.tf
  terraform-apply:
    docker:
      - image: unfor19/terraform-alpine:0.12.28
    steps:
      - checkout
      - run:
          name: terraform-apply
          command: |
            declare -n AWS_ACCESS_KEY_ID_SECRET_NAME=AWS_ACCESS_KEY_ID_${GITHUB_REF_SLUG}
            declare -n AWS_SECRET_ACCESS_KEY_SECRET_NAME=AWS_SECRET_ACCESS_KEY_${GITHUB_REF_SLUG}
            export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID_SECRET_NAME}
            export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY_SECRET_NAME}
            cd code/${GITHUB_REF_SLUG}/
            ls -lah
            terraform version
            rm -rf .terraform
            terraform init -input=false
            terraform get
            terraform validate
            terraform plan -out=plan.tfout -var environment=${GITHUB_REF_SLUG}
            terraform apply -auto-approve plan.tfout 
            rm -rf .terraform
